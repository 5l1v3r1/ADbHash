/*!
\class adb::Data
\brief The \c Data<Key, \c Value> class provides in-memory key-value storage.
\inmodule ADbHash

It stores data (\c Key-Value pairs) and meta data (\c char).
It must be constructed with initial size of data, size of meta data and
the default meta data value to initialize the meta data.

The data is set using setData(). If only value should be updated
use setValue() instead. Data are retrieved with key() and value()
respectively. Current data size is accesible with dataSize().

Meta data are \c char values that are independent from \c Key-Value data.
To set meta data you may use one of the setMetaData() overloads. To
retrieve meta data use metaData().

The internal storage is not resized automatically and you
cannot set (meta) data outside of current capacity obtained by
dataSize() and metaSize() respectively.

To change the capacity of the \c Data use resize().

\note The \c Data class is thin wrapper around actual storage abstracting
the internal mechanism so that any type of storage can be implemented
with the same interface and plugged into adb::Hash. As such it provides
no iterators nor convenience functionality like automatic resizing
in order to keep it as minimal as possible.
*/

/*!
\fn template<typename Key, typename Value> adb::Data<Key, Value>::Data(int64_t dataSize, int64_t metaSize, char metaValue)

Constructs \c Data object with given \a dataSize and \a metaSize. The
meta data will be initialized to \a metaValue.
*/

/*!
\fn template<typename Key, typename Value> int64_t adb::Data<Key, Value>::dataSize() const

Returns current data \c size.
*/

/*!
\fn template<typename Key, typename Value> Key adb::Data<Key, Value>::key(int64_t index) const

Returns \c Key stored at \a index. The \a index must be >= 0 and < dataSize().
*/

/*!
\fn template<typename Key, typename Value> const char *adb::Data<Key, Value>::metaData(int64_t index, int64_t size) const

Returns \c pointer to meta data starting at \a index. The index must
be >= 0 and < metaSize(). The \a size parameter is unused and is
provided for compatibility with different implementations that do
not store the data in contiguous memory.
*/

/*!
\fn template<typename Key, typename Value> int64_t adb::Data<Key, Value>::metaSize() const

Returns current meta data \c size.
*/

/*!
\fn template<typename Key, typename Value> void adb::Data<Key, Value>::resize(int64_t dataSize, int64_t metaSize, char metaValue)

Changes capacity expanding or truncating the internal storage to
\a dataSize and \a metaSize respectively. If \a metaSize is greater than
current metaSize() the new values are initialized to \a metaValue.
*/

/*!
\fn template<typename Key, typename Value> void adb::Data<Key, Value>::setData(int64_t index, const Key &key, const Value &value)

Sets data at \a index to \a key and \a value pair. The \a index must be
>= 0 and < dataSize().
*/

/*!
\fn template<typename Key, typename Value> void adb::Data<Key, Value>::setMetaData(int64_t index, const std::vector<char> &values)

Sets meta values starting at \a index to \a values. The \a index + size of
\a values must be < metaSize().
*/

/*!
\fn template<typename Key, typename Value> void adb::Data<Key, Value>::setMetaValue(int64_t index, char value)

Sets meta value at \a index to \a value. The \a index must be
>= 0 and < metaSize().
*/

/*!
\fn template<typename Key, typename Value> void adb::Data<Key, Value>::setValue(int64_t index, const Value &value)

Sets value at \a index to \a value. The \a index must be
>= 0 and < dataSize().
*/

/*!
\fn template<typename Key, typename Value> Value adb::Data<Key, Value>::value(int64_t index) const

Returns \c Value at \a index. The \a index must be
>= 0 and < dataSize().
*/
